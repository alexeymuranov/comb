-# Local variables that must be set:
-#   participant

%form{ :'accept-charset' => 'UTF-8',
       :action           => fixed_url("/#{ @locale }/#{ @page }/#{ participant.id }"),
       :method           => :post }
  %input{ :type => :hidden, :name => :_method, :value => :put }

  = haml :_jquery_ui_for_forms

  - if participant.errors.any?
    #form_error_explanation
      %h2
        - if participant.errors.count == 1
          = t 'activerecord.errors.template.header.one',
              :model => Participant.model_name.human
        - else
          = t 'activerecord.errors.template.header.other',
              :count => participant.errors.count,
              :model => Participant.model_name.human

      %ul
        - participant.errors.full_messages.each do |msg|
          %li
            = msg

  %fieldset
    %legend
      = label_from_attribute_name(Participant, :participations)
    %ol.fields
      - participant.participations.each do |participation|
        - conf = participation.conference
        %li
          = conf.title_with_details(@locale)
          %dl.fields
            - [:arrival_date, :departure_date].each do |attr|
              .field
                %dt.label
                  %label{ :for => "participations_#{ participation.id }_#{ attr }" }<
                    = label_from_attribute_name(Participation, attr)
                %dd.input
                  %input{ :id    => "participations_#{ participation.id }_#{ attr }",
                          :name  => "participations[#{ participation.id }][#{ attr }]",
                          :type  => :date,
                          :value => participation.public_send(attr) }
            .field
              %dt.label
                %label{ :for => "participations_#{ participation.id }_committee_comments" }<
                  = label_from_attribute_name(Participation, :committee_comments)
              %dd.input
                %textarea{ :id   => "participations_#{ participation.id }_committee_comments",
                           :name => "participations[#{ participation.id }][committee_comments]" }<
                  = preserve do
                    &= participation.committee_comments

  %dl.fields
    - [:first_name, :last_name,  :email, :affiliation].each do |attr|
      - required = Participant.attribute_constraints_on(attr)[:required]
      - label_html_classes = []
      - label_html_classes << 'required' if required
      .field
        %dt.label
          %label{ :for   => "participant_#{ attr }",
                  :class => label_html_classes }<
            = label_from_attribute_name(Participant, attr)
        %dd.input
          %input{ :id       => "participant_#{ attr }",
                  :name     => "participant[#{ attr }]",
                  :required => required,
                  :type     => input_html_type_for_attribute(Participant, attr),
                  :value    => participant.public_send(attr) }

    .field
      %dt.label
        %label{ :for => 'participant_academic_position' }<
          = label_from_attribute_name(Participant, :academic_position)
      %dd.input
        %select{ :id    => 'participant_academic_position',
                 :name  => 'participant[academic_position]',
                 :value => participant.academic_position }
          %option
          - t('pages.registration.form.select_options.academic_positions').each do |p|
            - if p == participant.academic_position
              %option{ :selected => true }
                = p
            - else
              %option
                = p

    - [:country, :city, :post_code, :street_address, :phone].each do |attr|
      .field
        %dt.label
          %label{ :for => "participant_#{ attr }" }<
            = label_from_attribute_name(Participant, attr)
        %dd.input
          %input{ :id    => "participant_#{ attr }",
                  :name  => "participant[#{ attr }]",
                  :type  => input_html_type_for_attribute(Participant, attr),
                  :value => participant.public_send(attr) }

    - [:i_m_t_member, :g_d_r_member, :invitation_needed, :visa_needed].each do |attr|
      .field
        %dt.label
          %label{ :for => "participant_#{ attr }" }<
            = label_from_attribute_name(Participant, attr)
        %dd.input
          - name = "participant[#{ attr }]"
          -# Hidden field to pass a value when the checkbox is not checked
          %input{ :name  => name,
                  :type  => :hidden,
                  :value => 0 }
          %input{ :id      => "participant_#{ attr }",
                  :name    => name,
                  :type    => :checkbox,
                  :value   => 1,
                  :checked => participant.public_send(attr) }
          %span= t 'yes'

    - [:funding_requests, :special_requests].each do |attr|
      .field
        %dt.label
          %label{ :for => "participant_#{ attr }" }<
            = label_from_attribute_name(Participant, attr)
        %dd.input
          %textarea{ :id   => "participant_#{ attr }",
                     :name => "participant[#{ attr }]" }<
            = preserve do
              &= participant.public_send(attr)

  - if participation = participant.co_m_b_participation
    %fieldset
      %legend
        = label_from_attribute_name(Participation, :talk_proposal)

      %dl.fields
        - if talk_proposal = participation.talk_proposal
          - title = talk_proposal.title
          - abstract = talk_proposal.abstract
        - else
          - abstract = title = nil
        .field
          %dt.label
            %label{ :for => "participations_#{ participation.id }_talk_proposal_attributes_title" }<
              = label_from_attribute_name(TalkProposal, :title)
          %dd.input
            %input.long_string{ :id    => "participations_#{ participation.id }_talk_proposal_attributes_title",
                                :name  => "participations[#{ participation.id }][talk_proposal_attributes][title]",
                                :type  => :text,
                                :value => title }
        .field
          %dt.label
            %label{ :for => "participations_#{ participation.id }_talk_proposal_attributes_abstract" }<
              = label_from_attribute_name(TalkProposal, :abstract)
          %dd.input
            %textarea{ :id   => "participations_#{ participation.id }_talk_proposal_attributes_abstract",
                       :name => "participations[#{ participation.id }][talk_proposal_attributes][abstract]" }<
              = preserve do
                &= abstract

  .actions
    %button.update{ :type => :submit, :name => 'button', :value => 'update' }
      = t 'buttons.submit'
    %a.button.cancel{ :href => fixed_url("/#{ @locale }/#{ ORG_PAGE_PREFIX }participants\#participant_#{ participant.id }"),
                      :role => :button }
      = t 'buttons.cancel'
